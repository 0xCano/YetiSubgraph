// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminFeePaid extends ethereum.Event {
  get params(): AdminFeePaid__Params {
    return new AdminFeePaid__Params(this);
  }
}

export class AdminFeePaid__Params {
  _event: AdminFeePaid;

  constructor(event: AdminFeePaid) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CallerFeePaid extends ethereum.Event {
  get params(): CallerFeePaid__Params {
    return new CallerFeePaid__Params(this);
  }
}

export class CallerFeePaid__Params {
  _event: CallerFeePaid;

  constructor(event: CallerFeePaid) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Reinvested extends ethereum.Event {
  get params(): Reinvested__Params {
    return new Reinvested__Params(this);
  }
}

export class Reinvested__Params {
  _event: Reinvested;

  constructor(event: Reinvested) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get preCompound(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get postCompound(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardTokenSet extends ethereum.Event {
  get params(): RewardTokenSet__Params {
    return new RewardTokenSet__Params(this);
  }
}

export class RewardTokenSet__Params {
  _event: RewardTokenSet;

  constructor(event: RewardTokenSet) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RouteSet extends ethereum.Event {
  get params(): RouteSet__Params {
    return new RouteSet__Params(this);
  }
}

export class RouteSet__Params {
  _event: RouteSet;

  constructor(event: RouteSet) {
    this._event = event;
  }

  get fromToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get path(): Array<RouteSetPathStruct> {
    return this._event.parameters[2].value.toTupleArray<RouteSetPathStruct>();
  }
}

export class RouteSetPathStruct extends ethereum.Tuple {
  get protocolSwapAddress(): Address {
    return this[0].toAddress();
  }

  get nodeType(): BigInt {
    return this[1].toBigInt();
  }

  get tokenIn(): Address {
    return this[2].toAddress();
  }

  get tokenOut(): Address {
    return this[3].toAddress();
  }

  get _misc(): BigInt {
    return this[4].toBigInt();
  }

  get _in(): BigInt {
    return this[5].toBigInt();
  }

  get _out(): BigInt {
    return this[6].toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get startingTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get endingTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get minSwapAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get actualOut(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class VaultOracle__routesResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromSignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromSignedBigInt(this.value6));
    return map;
  }
}

export class VaultOracle extends ethereum.SmartContract {
  static bind(address: Address): VaultOracle {
    return new VaultOracle("VaultOracle", address);
  }

  BOpsAddress(): Address {
    let result = super.call("BOpsAddress", "BOpsAddress():(address)", []);

    return result[0].toAddress();
  }

  try_BOpsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("BOpsAddress", "BOpsAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FIRST_DONATION(): BigInt {
    let result = super.call("FIRST_DONATION", "FIRST_DONATION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FIRST_DONATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FIRST_DONATION",
      "FIRST_DONATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_FIRST_MINT(): BigInt {
    let result = super.call("MIN_FIRST_MINT", "MIN_FIRST_MINT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_FIRST_MINT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_FIRST_MINT",
      "MIN_FIRST_MINT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_SWAP(): BigInt {
    let result = super.call("MIN_SWAP", "MIN_SWAP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_SWAP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_SWAP", "MIN_SWAP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WAVAX(): Address {
    let result = super.call("WAVAX", "WAVAX():(address)", []);

    return result[0].toAddress();
  }

  try_WAVAX(): ethereum.CallResult<Address> {
    let result = super.tryCall("WAVAX", "WAVAX():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aaveLendingPool(): Address {
    let result = super.call(
      "aaveLendingPool",
      "aaveLendingPool():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_aaveLendingPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aaveLendingPool",
      "aaveLendingPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  adminFee(): BigInt {
    let result = super.call("adminFee", "adminFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_adminFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("adminFee", "adminFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  callerFee(): BigInt {
    let result = super.call("callerFee", "callerFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_callerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("callerFee", "callerFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  compound(): BigInt {
    let result = super.call("compound", "compound():(uint256)", []);

    return result[0].toBigInt();
  }

  try_compound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("compound", "compound():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  deposit(_to: Address, _amt: BigInt): BigInt {
    let result = super.call("deposit", "deposit(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amt)
    ]);

    return result[0].toBigInt();
  }

  try_deposit(_to: Address, _amt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(_to), ethereum.Value.fromUnsignedBigInt(_amt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit1(_amt: BigInt): BigInt {
    let result = super.call("deposit", "deposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amt)
    ]);

    return result[0].toBigInt();
  }

  try_deposit1(_amt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deposit", "deposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositFor(_borrower: Address, _to: Address, _amt: BigInt): BigInt {
    let result = super.call(
      "depositFor",
      "depositFor(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amt)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositFor(
    _borrower: Address,
    _to: Address,
    _amt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositFor",
      "depositFor(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositWithPermit(
    _amt: BigInt,
    _value: BigInt,
    _deadline: BigInt,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): BigInt {
    let result = super.call(
      "depositWithPermit",
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amt),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositWithPermit(
    _amt: BigInt,
    _value: BigInt,
    _deadline: BigInt,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositWithPermit",
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amt),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emergencyRedeem(_amt: BigInt): BigInt {
    let result = super.call(
      "emergencyRedeem",
      "emergencyRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amt)]
    );

    return result[0].toBigInt();
  }

  try_emergencyRedeem(_amt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "emergencyRedeem",
      "emergencyRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRewardToken(_ind: BigInt): Address {
    let result = super.call(
      "getRewardToken",
      "getRewardToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_ind)]
    );

    return result[0].toAddress();
  }

  try_getRewardToken(_ind: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRewardToken",
      "getRewardToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_ind)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastReinvestTime(): BigInt {
    let result = super.call(
      "lastReinvestTime",
      "lastReinvestTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastReinvestTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastReinvestTime",
      "lastReinvestTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxReinvestStale(): BigInt {
    let result = super.call(
      "maxReinvestStale",
      "maxReinvestStale():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxReinvestStale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxReinvestStale",
      "maxReinvestStale():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numRewardTokens(): BigInt {
    let result = super.call(
      "numRewardTokens",
      "numRewardTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numRewardTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numRewardTokens",
      "numRewardTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  receiptPerUnderlying(): BigInt {
    let result = super.call(
      "receiptPerUnderlying",
      "receiptPerUnderlying():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_receiptPerUnderlying(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "receiptPerUnderlying",
      "receiptPerUnderlying():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(_to: Address, _amt: BigInt): BigInt {
    let result = super.call("redeem", "redeem(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amt)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(_to: Address, _amt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem1(_amt: BigInt): BigInt {
    let result = super.call("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amt)
    ]);

    return result[0].toBigInt();
  }

  try_redeem1(_amt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemFor(_amt: BigInt, _from: Address, _to: Address): BigInt {
    let result = super.call(
      "redeemFor",
      "redeemFor(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amt),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemFor(
    _amt: BigInt,
    _from: Address,
    _to: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemFor",
      "redeemFor(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amt),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemForWithPermit(
    _amt: BigInt,
    _from: Address,
    _to: Address,
    _value: BigInt,
    _deadline: BigInt,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): BigInt {
    let result = super.call(
      "redeemForWithPermit",
      "redeemForWithPermit(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amt),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemForWithPermit(
    _amt: BigInt,
    _from: Address,
    _to: Address,
    _value: BigInt,
    _deadline: BigInt,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemForWithPermit",
      "redeemForWithPermit(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amt),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardTokens(param0: BigInt): Address {
    let result = super.call("rewardTokens", "rewardTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_rewardTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardTokens",
      "rewardTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  routes(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): VaultOracle__routesResult {
    let result = super.call(
      "routes",
      "routes(address,address,uint256):(address,uint256,address,address,int128,int128,int128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new VaultOracle__routesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_routes(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<VaultOracle__routesResult> {
    let result = super.tryCall(
      "routes",
      "routes(address,address,uint256):(address,uint256,address,address,int128,int128,int128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VaultOracle__routesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalHoldings(): BigInt {
    let result = super.call("totalHoldings", "totalHoldings():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalHoldings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalHoldings",
      "totalHoldings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  traderJoeRouter(): Address {
    let result = super.call(
      "traderJoeRouter",
      "traderJoeRouter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_traderJoeRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "traderJoeRouter",
      "traderJoeRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlyingDecimal(): BigInt {
    let result = super.call(
      "underlyingDecimal",
      "underlyingDecimal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_underlyingDecimal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingDecimal",
      "underlyingDecimal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingPerReceipt(): BigInt {
    let result = super.call(
      "underlyingPerReceipt",
      "underlyingPerReceipt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_underlyingPerReceipt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingPerReceipt",
      "underlyingPerReceipt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(_amt: BigInt): BigInt {
    let result = super.call("withdraw", "withdraw(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amt)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(_amt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdraw", "withdraw(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFor(_amt: BigInt, _from: Address, _to: Address): BigInt {
    let result = super.call(
      "withdrawFor",
      "withdrawFor(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amt),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawFor(
    _amt: BigInt,
    _from: Address,
    _to: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFor",
      "withdrawFor(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amt),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CompoundCall extends ethereum.Call {
  get inputs(): CompoundCall__Inputs {
    return new CompoundCall__Inputs(this);
  }

  get outputs(): CompoundCall__Outputs {
    return new CompoundCall__Outputs(this);
  }
}

export class CompoundCall__Inputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }
}

export class CompoundCall__Outputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get receiptTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Deposit1Call extends ethereum.Call {
  get inputs(): Deposit1Call__Inputs {
    return new Deposit1Call__Inputs(this);
  }

  get outputs(): Deposit1Call__Outputs {
    return new Deposit1Call__Outputs(this);
  }
}

export class Deposit1Call__Inputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get _amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Deposit1Call__Outputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get receiptTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositWithPermitCall extends ethereum.Call {
  get inputs(): DepositWithPermitCall__Inputs {
    return new DepositWithPermitCall__Inputs(this);
  }

  get outputs(): DepositWithPermitCall__Outputs {
    return new DepositWithPermitCall__Outputs(this);
  }
}

export class DepositWithPermitCall__Inputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get _amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DepositWithPermitCall__Outputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get receiptTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DeprecateRewardTokenCall extends ethereum.Call {
  get inputs(): DeprecateRewardTokenCall__Inputs {
    return new DeprecateRewardTokenCall__Inputs(this);
  }

  get outputs(): DeprecateRewardTokenCall__Outputs {
    return new DeprecateRewardTokenCall__Outputs(this);
  }
}

export class DeprecateRewardTokenCall__Inputs {
  _call: DeprecateRewardTokenCall;

  constructor(call: DeprecateRewardTokenCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeprecateRewardTokenCall__Outputs {
  _call: DeprecateRewardTokenCall;

  constructor(call: DeprecateRewardTokenCall) {
    this._call = call;
  }
}

export class EmergencyRedeemCall extends ethereum.Call {
  get inputs(): EmergencyRedeemCall__Inputs {
    return new EmergencyRedeemCall__Inputs(this);
  }

  get outputs(): EmergencyRedeemCall__Outputs {
    return new EmergencyRedeemCall__Outputs(this);
  }
}

export class EmergencyRedeemCall__Inputs {
  _call: EmergencyRedeemCall;

  constructor(call: EmergencyRedeemCall) {
    this._call = call;
  }

  get _amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyRedeemCall__Outputs {
  _call: EmergencyRedeemCall;

  constructor(call: EmergencyRedeemCall) {
    this._call = call;
  }

  get amtToReturn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _underlying(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _adminFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _callerFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _maxReinvestStale(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _WAVAX(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class PushRewardTokenCall extends ethereum.Call {
  get inputs(): PushRewardTokenCall__Inputs {
    return new PushRewardTokenCall__Inputs(this);
  }

  get outputs(): PushRewardTokenCall__Outputs {
    return new PushRewardTokenCall__Outputs(this);
  }
}

export class PushRewardTokenCall__Inputs {
  _call: PushRewardTokenCall;

  constructor(call: PushRewardTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PushRewardTokenCall__Outputs {
  _call: PushRewardTokenCall;

  constructor(call: PushRewardTokenCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get amtToReturn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Redeem1Call extends ethereum.Call {
  get inputs(): Redeem1Call__Inputs {
    return new Redeem1Call__Inputs(this);
  }

  get outputs(): Redeem1Call__Outputs {
    return new Redeem1Call__Outputs(this);
  }
}

export class Redeem1Call__Inputs {
  _call: Redeem1Call;

  constructor(call: Redeem1Call) {
    this._call = call;
  }

  get _amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Redeem1Call__Outputs {
  _call: Redeem1Call;

  constructor(call: Redeem1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemForCall extends ethereum.Call {
  get inputs(): RedeemForCall__Inputs {
    return new RedeemForCall__Inputs(this);
  }

  get outputs(): RedeemForCall__Outputs {
    return new RedeemForCall__Outputs(this);
  }
}

export class RedeemForCall__Inputs {
  _call: RedeemForCall;

  constructor(call: RedeemForCall) {
    this._call = call;
  }

  get _amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemForCall__Outputs {
  _call: RedeemForCall;

  constructor(call: RedeemForCall) {
    this._call = call;
  }

  get amtToReturn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemForWithPermitCall extends ethereum.Call {
  get inputs(): RedeemForWithPermitCall__Inputs {
    return new RedeemForWithPermitCall__Inputs(this);
  }

  get outputs(): RedeemForWithPermitCall__Outputs {
    return new RedeemForWithPermitCall__Outputs(this);
  }
}

export class RedeemForWithPermitCall__Inputs {
  _call: RedeemForWithPermitCall;

  constructor(call: RedeemForWithPermitCall) {
    this._call = call;
  }

  get _amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class RedeemForWithPermitCall__Outputs {
  _call: RedeemForWithPermitCall;

  constructor(call: RedeemForWithPermitCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAAVECall extends ethereum.Call {
  get inputs(): SetAAVECall__Inputs {
    return new SetAAVECall__Inputs(this);
  }

  get outputs(): SetAAVECall__Outputs {
    return new SetAAVECall__Outputs(this);
  }
}

export class SetAAVECall__Inputs {
  _call: SetAAVECall;

  constructor(call: SetAAVECall) {
    this._call = call;
  }

  get _aaveLendingPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAAVECall__Outputs {
  _call: SetAAVECall;

  constructor(call: SetAAVECall) {
    this._call = call;
  }
}

export class SetApprovalsCall extends ethereum.Call {
  get inputs(): SetApprovalsCall__Inputs {
    return new SetApprovalsCall__Inputs(this);
  }

  get outputs(): SetApprovalsCall__Outputs {
    return new SetApprovalsCall__Outputs(this);
  }
}

export class SetApprovalsCall__Inputs {
  _call: SetApprovalsCall;

  constructor(call: SetApprovalsCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _who(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetApprovalsCall__Outputs {
  _call: SetApprovalsCall;

  constructor(call: SetApprovalsCall) {
    this._call = call;
  }
}

export class SetBOpsCall extends ethereum.Call {
  get inputs(): SetBOpsCall__Inputs {
    return new SetBOpsCall__Inputs(this);
  }

  get outputs(): SetBOpsCall__Outputs {
    return new SetBOpsCall__Outputs(this);
  }
}

export class SetBOpsCall__Inputs {
  _call: SetBOpsCall;

  constructor(call: SetBOpsCall) {
    this._call = call;
  }

  get _BOpsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBOpsCall__Outputs {
  _call: SetBOpsCall;

  constructor(call: SetBOpsCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _adminFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _callerFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetJoeRouterCall extends ethereum.Call {
  get inputs(): SetJoeRouterCall__Inputs {
    return new SetJoeRouterCall__Inputs(this);
  }

  get outputs(): SetJoeRouterCall__Outputs {
    return new SetJoeRouterCall__Outputs(this);
  }
}

export class SetJoeRouterCall__Inputs {
  _call: SetJoeRouterCall;

  constructor(call: SetJoeRouterCall) {
    this._call = call;
  }

  get _traderJoeRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetJoeRouterCall__Outputs {
  _call: SetJoeRouterCall;

  constructor(call: SetJoeRouterCall) {
    this._call = call;
  }
}

export class SetRouteCall extends ethereum.Call {
  get inputs(): SetRouteCall__Inputs {
    return new SetRouteCall__Inputs(this);
  }

  get outputs(): SetRouteCall__Outputs {
    return new SetRouteCall__Outputs(this);
  }
}

export class SetRouteCall__Inputs {
  _call: SetRouteCall;

  constructor(call: SetRouteCall) {
    this._call = call;
  }

  get _fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _path(): Array<SetRouteCall_pathStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      SetRouteCall_pathStruct
    >();
  }
}

export class SetRouteCall__Outputs {
  _call: SetRouteCall;

  constructor(call: SetRouteCall) {
    this._call = call;
  }
}

export class SetRouteCall_pathStruct extends ethereum.Tuple {
  get protocolSwapAddress(): Address {
    return this[0].toAddress();
  }

  get nodeType(): BigInt {
    return this[1].toBigInt();
  }

  get tokenIn(): Address {
    return this[2].toAddress();
  }

  get tokenOut(): Address {
    return this[3].toAddress();
  }

  get _misc(): BigInt {
    return this[4].toBigInt();
  }

  get _in(): BigInt {
    return this[5].toBigInt();
  }

  get _out(): BigInt {
    return this[6].toBigInt();
  }
}

export class SetStaleCall extends ethereum.Call {
  get inputs(): SetStaleCall__Inputs {
    return new SetStaleCall__Inputs(this);
  }

  get outputs(): SetStaleCall__Outputs {
    return new SetStaleCall__Outputs(this);
  }
}

export class SetStaleCall__Inputs {
  _call: SetStaleCall;

  constructor(call: SetStaleCall) {
    this._call = call;
  }

  get _maxReinvestStale(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStaleCall__Outputs {
  _call: SetStaleCall;

  constructor(call: SetStaleCall) {
    this._call = call;
  }
}

export class TotalHoldingsCall extends ethereum.Call {
  get inputs(): TotalHoldingsCall__Inputs {
    return new TotalHoldingsCall__Inputs(this);
  }

  get outputs(): TotalHoldingsCall__Outputs {
    return new TotalHoldingsCall__Outputs(this);
  }
}

export class TotalHoldingsCall__Inputs {
  _call: TotalHoldingsCall;

  constructor(call: TotalHoldingsCall) {
    this._call = call;
  }
}

export class TotalHoldingsCall__Outputs {
  _call: TotalHoldingsCall;

  constructor(call: TotalHoldingsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawForCall extends ethereum.Call {
  get inputs(): WithdrawForCall__Inputs {
    return new WithdrawForCall__Inputs(this);
  }

  get outputs(): WithdrawForCall__Outputs {
    return new WithdrawForCall__Outputs(this);
  }
}

export class WithdrawForCall__Inputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }

  get _amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawForCall__Outputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
