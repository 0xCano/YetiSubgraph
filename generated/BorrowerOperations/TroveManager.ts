// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BaseRateUpdated extends ethereum.Event {
  get params(): BaseRateUpdated__Params {
    return new BaseRateUpdated__Params(this);
  }
}

export class BaseRateUpdated__Params {
  _event: BaseRateUpdated;

  constructor(event: BaseRateUpdated) {
    this._event = event;
  }

  get _baseRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class InterestApplied extends ethereum.Event {
  get params(): InterestApplied__Params {
    return new InterestApplied__Params(this);
  }
}

export class InterestApplied__Params {
  _event: InterestApplied;

  constructor(event: InterestApplied) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalInterest(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LTermsUpdated extends ethereum.Event {
  get params(): LTermsUpdated__Params {
    return new LTermsUpdated__Params(this);
  }
}

export class LTermsUpdated__Params {
  _event: LTermsUpdated;

  constructor(event: LTermsUpdated) {
    this._event = event;
  }

  get _Coll_Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _L_Coll(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _L_YUSDDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LTermsUpdated1 extends ethereum.Event {
  get params(): LTermsUpdated1__Params {
    return new LTermsUpdated1__Params(this);
  }
}

export class LTermsUpdated1__Params {
  _event: LTermsUpdated1;

  constructor(event: LTermsUpdated1) {
    this._event = event;
  }

  get _L_ETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _L_YUSDDebt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class L_YUSDInterestUpdated extends ethereum.Event {
  get params(): L_YUSDInterestUpdated__Params {
    return new L_YUSDInterestUpdated__Params(this);
  }
}

export class L_YUSDInterestUpdated__Params {
  _event: L_YUSDInterestUpdated;

  constructor(event: L_YUSDInterestUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get new_Lterm(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LastFeeOpTimeUpdated extends ethereum.Event {
  get params(): LastFeeOpTimeUpdated__Params {
    return new LastFeeOpTimeUpdated__Params(this);
  }
}

export class LastFeeOpTimeUpdated__Params {
  _event: LastFeeOpTimeUpdated;

  constructor(event: LastFeeOpTimeUpdated) {
    this._event = event;
  }

  get _lastFeeOpTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Liquidation extends ethereum.Event {
  get params(): Liquidation__Params {
    return new Liquidation__Params(this);
  }
}

export class Liquidation__Params {
  _event: Liquidation;

  constructor(event: Liquidation) {
    this._event = event;
  }

  get liquidatedAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalYUSDGasCompensation(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalCollTokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get totalCollAmounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get totalCollGasCompTokens(): Array<Address> {
    return this._event.parameters[4].value.toAddressArray();
  }

  get totalCollGasCompAmounts(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }
}

export class Redemption extends ethereum.Event {
  get params(): Redemption__Params {
    return new Redemption__Params(this);
  }
}

export class Redemption__Params {
  _event: Redemption;

  constructor(event: Redemption) {
    this._event = event;
  }

  get _attemptedYUSDAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _actualYUSDAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get YUSDfee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class SystemSnapshotsUpdated extends ethereum.Event {
  get params(): SystemSnapshotsUpdated__Params {
    return new SystemSnapshotsUpdated__Params(this);
  }
}

export class SystemSnapshotsUpdated__Params {
  _event: SystemSnapshotsUpdated;

  constructor(event: SystemSnapshotsUpdated) {
    this._event = event;
  }

  get _unix(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SystemSnapshotsUpdated1 extends ethereum.Event {
  get params(): SystemSnapshotsUpdated1__Params {
    return new SystemSnapshotsUpdated1__Params(this);
  }
}

export class SystemSnapshotsUpdated1__Params {
  _event: SystemSnapshotsUpdated1;

  constructor(event: SystemSnapshotsUpdated1) {
    this._event = event;
  }

  get _totalStakesSnapshot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _totalCollateralSnapshot(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TotalStakesUpdated extends ethereum.Event {
  get params(): TotalStakesUpdated__Params {
    return new TotalStakesUpdated__Params(this);
  }
}

export class TotalStakesUpdated__Params {
  _event: TotalStakesUpdated;

  constructor(event: TotalStakesUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newTotalStakes(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TroveIndexUpdated extends ethereum.Event {
  get params(): TroveIndexUpdated__Params {
    return new TroveIndexUpdated__Params(this);
  }
}

export class TroveIndexUpdated__Params {
  _event: TroveIndexUpdated;

  constructor(event: TroveIndexUpdated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TroveLiquidated extends ethereum.Event {
  get params(): TroveLiquidated__Params {
    return new TroveLiquidated__Params(this);
  }
}

export class TroveLiquidated__Params {
  _event: TroveLiquidated;

  constructor(event: TroveLiquidated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _debt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _coll(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get operation(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class TroveSnapshotsUpdated extends ethereum.Event {
  get params(): TroveSnapshotsUpdated__Params {
    return new TroveSnapshotsUpdated__Params(this);
  }
}

export class TroveSnapshotsUpdated__Params {
  _event: TroveSnapshotsUpdated;

  constructor(event: TroveSnapshotsUpdated) {
    this._event = event;
  }

  get _unix(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TroveSnapshotsUpdated1 extends ethereum.Event {
  get params(): TroveSnapshotsUpdated1__Params {
    return new TroveSnapshotsUpdated1__Params(this);
  }
}

export class TroveSnapshotsUpdated1__Params {
  _event: TroveSnapshotsUpdated1;

  constructor(event: TroveSnapshotsUpdated1) {
    this._event = event;
  }

  get _L_ETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _L_YUSDDebt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TroveUpdated extends ethereum.Event {
  get params(): TroveUpdated__Params {
    return new TroveUpdated__Params(this);
  }
}

export class TroveUpdated__Params {
  _event: TroveUpdated;

  constructor(event: TroveUpdated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _debt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get operation(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class TroveManager__getCurrentTroveStateResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: BigInt;

  constructor(value0: Array<Address>, value1: Array<BigInt>, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class TroveManager__getEntireDebtAndCollsResult {
  value0: BigInt;
  value1: Array<Address>;
  value2: Array<BigInt>;
  value3: BigInt;
  value4: Array<Address>;
  value5: Array<BigInt>;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Array<Address>,
    value2: Array<BigInt>,
    value3: BigInt,
    value4: Array<Address>,
    value5: Array<BigInt>,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddressArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class TroveManager__getPendingCollRewardsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class TroveManager__getPendingYUSDDebtRewardResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class TroveManager__getTroveCollsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class TroveManager extends ethereum.SmartContract {
  static bind(address: Address): TroveManager {
    return new TroveManager("TroveManager", address);
  }

  DECIMAL_PRECISION(): BigInt {
    let result = super.call(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DECIMAL_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BORROWING_FEE(): BigInt {
    let result = super.call(
      "MAX_BORROWING_FEE",
      "MAX_BORROWING_FEE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_BORROWING_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_BORROWING_FEE",
      "MAX_BORROWING_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINUTE_DECAY_FACTOR(): BigInt {
    let result = super.call(
      "MINUTE_DECAY_FACTOR",
      "MINUTE_DECAY_FACTOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINUTE_DECAY_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINUTE_DECAY_FACTOR",
      "MINUTE_DECAY_FACTOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  addTroveOwnerToArray(_borrower: Address): BigInt {
    let result = super.call(
      "addTroveOwnerToArray",
      "addTroveOwnerToArray(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_addTroveOwnerToArray(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addTroveOwnerToArray",
      "addTroveOwnerToArray(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseRate(): BigInt {
    let result = super.call("baseRate", "baseRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_baseRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseRate", "baseRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcDecayedBaseRate(): BigInt {
    let result = super.call(
      "calcDecayedBaseRate",
      "calcDecayedBaseRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calcDecayedBaseRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcDecayedBaseRate",
      "calcDecayedBaseRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  changeTroveDebt(
    _borrower: Address,
    _debtChange: BigInt,
    _isDebtIncrease: boolean
  ): BigInt {
    let result = super.call(
      "changeTroveDebt",
      "changeTroveDebt(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtChange),
        ethereum.Value.fromBoolean(_isDebtIncrease)
      ]
    );

    return result[0].toBigInt();
  }

  try_changeTroveDebt(
    _borrower: Address,
    _debtChange: BigInt,
    _isDebtIncrease: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "changeTroveDebt",
      "changeTroveDebt(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(_debtChange),
        ethereum.Value.fromBoolean(_isDebtIncrease)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkRecoveryMode(): boolean {
    let result = super.call(
      "checkRecoveryMode",
      "checkRecoveryMode():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_checkRecoveryMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkRecoveryMode",
      "checkRecoveryMode():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decayBaseRateFromBorrowingAndCalculateFee(_YUSDDebt: BigInt): BigInt {
    let result = super.call(
      "decayBaseRateFromBorrowingAndCalculateFee",
      "decayBaseRateFromBorrowingAndCalculateFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDDebt)]
    );

    return result[0].toBigInt();
  }

  try_decayBaseRateFromBorrowingAndCalculateFee(
    _YUSDDebt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "decayBaseRateFromBorrowingAndCalculateFee",
      "decayBaseRateFromBorrowingAndCalculateFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDDebt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingFee(_YUSDDebt: BigInt): BigInt {
    let result = super.call(
      "getBorrowingFee",
      "getBorrowingFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDDebt)]
    );

    return result[0].toBigInt();
  }

  try_getBorrowingFee(_YUSDDebt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingFee",
      "getBorrowingFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDDebt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingFeeWithDecay(_YUSDDebt: BigInt): BigInt {
    let result = super.call(
      "getBorrowingFeeWithDecay",
      "getBorrowingFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDDebt)]
    );

    return result[0].toBigInt();
  }

  try_getBorrowingFeeWithDecay(_YUSDDebt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingFeeWithDecay",
      "getBorrowingFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDDebt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingRate(): BigInt {
    let result = super.call(
      "getBorrowingRate",
      "getBorrowingRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBorrowingRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingRate",
      "getBorrowingRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowingRateWithDecay(): BigInt {
    let result = super.call(
      "getBorrowingRateWithDecay",
      "getBorrowingRateWithDecay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBorrowingRateWithDecay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowingRateWithDecay",
      "getBorrowingRateWithDecay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCCR(): BigInt {
    let result = super.call("getCCR", "getCCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCCR", "getCCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralProportionDenominator(_borrower: Address): BigInt {
    let result = super.call(
      "getCollateralProportionDenominator",
      "getCollateralProportionDenominator(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getCollateralProportionDenominator(
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralProportionDenominator",
      "getCollateralProportionDenominator(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralProportionNumerator(
    _borrower: Address,
    _collateral: Address
  ): BigInt {
    let result = super.call(
      "getCollateralProportionNumerator",
      "getCollateralProportionNumerator(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_collateral)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCollateralProportionNumerator(
    _borrower: Address,
    _collateral: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralProportionNumerator",
      "getCollateralProportionNumerator(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_collateral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentAICR(_borrower: Address): BigInt {
    let result = super.call(
      "getCurrentAICR",
      "getCurrentAICR(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentAICR(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentAICR",
      "getCurrentAICR(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentICR(_borrower: Address): BigInt {
    let result = super.call(
      "getCurrentICR",
      "getCurrentICR(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentICR(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentICR",
      "getCurrentICR(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentTroveState(
    _borrower: Address
  ): TroveManager__getCurrentTroveStateResult {
    let result = super.call(
      "getCurrentTroveState",
      "getCurrentTroveState(address):(address[],uint256[],uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new TroveManager__getCurrentTroveStateResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt()
    );
  }

  try_getCurrentTroveState(
    _borrower: Address
  ): ethereum.CallResult<TroveManager__getCurrentTroveStateResult> {
    let result = super.tryCall(
      "getCurrentTroveState",
      "getCurrentTroveState(address):(address[],uint256[],uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__getCurrentTroveStateResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt()
      )
    );
  }

  getEntireDebtAndColls(
    _borrower: Address
  ): TroveManager__getEntireDebtAndCollsResult {
    let result = super.call(
      "getEntireDebtAndColls",
      "getEntireDebtAndColls(address):(uint256,address[],uint256[],uint256,address[],uint256[],uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new TroveManager__getEntireDebtAndCollsResult(
      result[0].toBigInt(),
      result[1].toAddressArray(),
      result[2].toBigIntArray(),
      result[3].toBigInt(),
      result[4].toAddressArray(),
      result[5].toBigIntArray(),
      result[6].toBigInt()
    );
  }

  try_getEntireDebtAndColls(
    _borrower: Address
  ): ethereum.CallResult<TroveManager__getEntireDebtAndCollsResult> {
    let result = super.tryCall(
      "getEntireDebtAndColls",
      "getEntireDebtAndColls(address):(uint256,address[],uint256[],uint256,address[],uint256[],uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__getEntireDebtAndCollsResult(
        value[0].toBigInt(),
        value[1].toAddressArray(),
        value[2].toBigIntArray(),
        value[3].toBigInt(),
        value[4].toAddressArray(),
        value[5].toBigIntArray(),
        value[6].toBigInt()
      )
    );
  }

  getEntireSystemColl(): BigInt {
    let result = super.call(
      "getEntireSystemColl",
      "getEntireSystemColl():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemColl(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemColl",
      "getEntireSystemColl():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntireSystemDebt(): BigInt {
    let result = super.call(
      "getEntireSystemDebt",
      "getEntireSystemDebt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemDebt",
      "getEntireSystemDebt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getL_Coll(_token: Address): BigInt {
    let result = super.call("getL_Coll", "getL_Coll(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_getL_Coll(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getL_Coll", "getL_Coll(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getL_YUSD(_token: Address): BigInt {
    let result = super.call("getL_YUSD", "getL_YUSD(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_getL_YUSD(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getL_YUSD", "getL_YUSD(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMCR(): BigInt {
    let result = super.call("getMCR", "getMCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMCR", "getMCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMIN_NET_DEBT(): BigInt {
    let result = super.call(
      "getMIN_NET_DEBT",
      "getMIN_NET_DEBT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMIN_NET_DEBT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMIN_NET_DEBT",
      "getMIN_NET_DEBT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingCollRewards(
    _borrower: Address
  ): TroveManager__getPendingCollRewardsResult {
    let result = super.call(
      "getPendingCollRewards",
      "getPendingCollRewards(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new TroveManager__getPendingCollRewardsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getPendingCollRewards(
    _borrower: Address
  ): ethereum.CallResult<TroveManager__getPendingCollRewardsResult> {
    let result = super.tryCall(
      "getPendingCollRewards",
      "getPendingCollRewards(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__getPendingCollRewardsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getPendingYUSDDebtReward(
    _borrower: Address
  ): TroveManager__getPendingYUSDDebtRewardResult {
    let result = super.call(
      "getPendingYUSDDebtReward",
      "getPendingYUSDDebtReward(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new TroveManager__getPendingYUSDDebtRewardResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPendingYUSDDebtReward(
    _borrower: Address
  ): ethereum.CallResult<TroveManager__getPendingYUSDDebtRewardResult> {
    let result = super.tryCall(
      "getPendingYUSDDebtReward",
      "getPendingYUSDDebtReward(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__getPendingYUSDDebtRewardResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getREDEMPTION_FEE_FLOOR(): BigInt {
    let result = super.call(
      "getREDEMPTION_FEE_FLOOR",
      "getREDEMPTION_FEE_FLOOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getREDEMPTION_FEE_FLOOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getREDEMPTION_FEE_FLOOR",
      "getREDEMPTION_FEE_FLOOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionFeeWithDecay(_YUSDRedeemed: BigInt): BigInt {
    let result = super.call(
      "getRedemptionFeeWithDecay",
      "getRedemptionFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDRedeemed)]
    );

    return result[0].toBigInt();
  }

  try_getRedemptionFeeWithDecay(
    _YUSDRedeemed: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionFeeWithDecay",
      "getRedemptionFeeWithDecay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_YUSDRedeemed)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionRate(): BigInt {
    let result = super.call(
      "getRedemptionRate",
      "getRedemptionRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRedemptionRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionRate",
      "getRedemptionRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedemptionRateWithDecay(): BigInt {
    let result = super.call(
      "getRedemptionRateWithDecay",
      "getRedemptionRateWithDecay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRedemptionRateWithDecay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedemptionRateWithDecay",
      "getRedemptionRateWithDecay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardSnapshotColl(_borrower: Address, _token: Address): BigInt {
    let result = super.call(
      "getRewardSnapshotColl",
      "getRewardSnapshotColl(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRewardSnapshotColl(
    _borrower: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardSnapshotColl",
      "getRewardSnapshotColl(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardSnapshotYUSD(_borrower: Address, _token: Address): BigInt {
    let result = super.call(
      "getRewardSnapshotYUSD",
      "getRewardSnapshotYUSD(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRewardSnapshotYUSD(
    _borrower: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardSnapshotYUSD",
      "getRewardSnapshotYUSD(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTCR(): BigInt {
    let result = super.call("getTCR", "getTCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTCR", "getTCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalStake(_token: Address): BigInt {
    let result = super.call(
      "getTotalStake",
      "getTotalStake(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getTotalStake(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalStake",
      "getTotalStake(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveColls(_borrower: Address): TroveManager__getTroveCollsResult {
    let result = super.call(
      "getTroveColls",
      "getTroveColls(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new TroveManager__getTroveCollsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getTroveColls(
    _borrower: Address
  ): ethereum.CallResult<TroveManager__getTroveCollsResult> {
    let result = super.tryCall(
      "getTroveColls",
      "getTroveColls(address):(address[],uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TroveManager__getTroveCollsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getTroveDebt(_borrower: Address): BigInt {
    let result = super.call("getTroveDebt", "getTroveDebt(address):(uint256)", [
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBigInt();
  }

  try_getTroveDebt(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveDebt",
      "getTroveDebt(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveFromTroveOwnersArray(_index: BigInt): Address {
    let result = super.call(
      "getTroveFromTroveOwnersArray",
      "getTroveFromTroveOwnersArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toAddress();
  }

  try_getTroveFromTroveOwnersArray(
    _index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTroveFromTroveOwnersArray",
      "getTroveFromTroveOwnersArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTroveOwnersCount(): BigInt {
    let result = super.call(
      "getTroveOwnersCount",
      "getTroveOwnersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTroveOwnersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveOwnersCount",
      "getTroveOwnersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveStake(_borrower: Address, _token: Address): BigInt {
    let result = super.call(
      "getTroveStake",
      "getTroveStake(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTroveStake(
    _borrower: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveStake",
      "getTroveStake(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromAddress(_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveStatus(_borrower: Address): BigInt {
    let result = super.call(
      "getTroveStatus",
      "getTroveStatus(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigInt();
  }

  try_getTroveStatus(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTroveStatus",
      "getTroveStatus(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTroveVC(_borrower: Address): BigInt {
    let result = super.call("getTroveVC", "getTroveVC(address):(uint256)", [
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBigInt();
  }

  try_getTroveVC(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTroveVC", "getTroveVC(address):(uint256)", [
      ethereum.Value.fromAddress(_borrower)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getYUSD_GAS_COMPENSATION(): BigInt {
    let result = super.call(
      "getYUSD_GAS_COMPENSATION",
      "getYUSD_GAS_COMPENSATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getYUSD_GAS_COMPENSATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getYUSD_GAS_COMPENSATION",
      "getYUSD_GAS_COMPENSATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasPendingRewards(_borrower: Address): boolean {
    let result = super.call(
      "hasPendingRewards",
      "hasPendingRewards(address):(bool)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBoolean();
  }

  try_hasPendingRewards(_borrower: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasPendingRewards",
      "hasPendingRewards(address):(bool)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  interestTimeWindow(): BigInt {
    let result = super.call(
      "interestTimeWindow",
      "interestTimeWindow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestTimeWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestTimeWindow",
      "interestTimeWindow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isTroveActive(_borrower: Address): boolean {
    let result = super.call("isTroveActive", "isTroveActive(address):(bool)", [
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBoolean();
  }

  try_isTroveActive(_borrower: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTroveActive",
      "isTroveActive(address):(bool)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastCollError_Redistribution(param0: Address): BigInt {
    let result = super.call(
      "lastCollError_Redistribution",
      "lastCollError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastCollError_Redistribution(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCollError_Redistribution",
      "lastCollError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastFeeOperationTime(): BigInt {
    let result = super.call(
      "lastFeeOperationTime",
      "lastFeeOperationTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastFeeOperationTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFeeOperationTime",
      "lastFeeOperationTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastInterestRateUpdateTime(): BigInt {
    let result = super.call(
      "lastInterestRateUpdateTime",
      "lastInterestRateUpdateTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastInterestRateUpdateTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastInterestRateUpdateTime",
      "lastInterestRateUpdateTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastYUSDDebtError_Redistribution(param0: Address): BigInt {
    let result = super.call(
      "lastYUSDDebtError_Redistribution",
      "lastYUSDDebtError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastYUSDDebtError_Redistribution(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastYUSDDebtError_Redistribution",
      "lastYUSDDebtError_Redistribution(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalCollateralSnapshot(param0: Address): BigInt {
    let result = super.call(
      "totalCollateralSnapshot",
      "totalCollateralSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalCollateralSnapshot(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateralSnapshot",
      "totalCollateralSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakesSnapshot(param0: Address): BigInt {
    let result = super.call(
      "totalStakesSnapshot",
      "totalStakesSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalStakesSnapshot(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakesSnapshot",
      "totalStakesSnapshot(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddTroveOwnerToArrayCall extends ethereum.Call {
  get inputs(): AddTroveOwnerToArrayCall__Inputs {
    return new AddTroveOwnerToArrayCall__Inputs(this);
  }

  get outputs(): AddTroveOwnerToArrayCall__Outputs {
    return new AddTroveOwnerToArrayCall__Outputs(this);
  }
}

export class AddTroveOwnerToArrayCall__Inputs {
  _call: AddTroveOwnerToArrayCall;

  constructor(call: AddTroveOwnerToArrayCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTroveOwnerToArrayCall__Outputs {
  _call: AddTroveOwnerToArrayCall;

  constructor(call: AddTroveOwnerToArrayCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApplyPendingRewardsCall extends ethereum.Call {
  get inputs(): ApplyPendingRewardsCall__Inputs {
    return new ApplyPendingRewardsCall__Inputs(this);
  }

  get outputs(): ApplyPendingRewardsCall__Outputs {
    return new ApplyPendingRewardsCall__Outputs(this);
  }
}

export class ApplyPendingRewardsCall__Inputs {
  _call: ApplyPendingRewardsCall;

  constructor(call: ApplyPendingRewardsCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApplyPendingRewardsCall__Outputs {
  _call: ApplyPendingRewardsCall;

  constructor(call: ApplyPendingRewardsCall) {
    this._call = call;
  }
}

export class BatchLiquidateTrovesCall extends ethereum.Call {
  get inputs(): BatchLiquidateTrovesCall__Inputs {
    return new BatchLiquidateTrovesCall__Inputs(this);
  }

  get outputs(): BatchLiquidateTrovesCall__Outputs {
    return new BatchLiquidateTrovesCall__Outputs(this);
  }
}

export class BatchLiquidateTrovesCall__Inputs {
  _call: BatchLiquidateTrovesCall;

  constructor(call: BatchLiquidateTrovesCall) {
    this._call = call;
  }

  get _troveArray(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _liquidator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BatchLiquidateTrovesCall__Outputs {
  _call: BatchLiquidateTrovesCall;

  constructor(call: BatchLiquidateTrovesCall) {
    this._call = call;
  }
}

export class ChangeInterestTimeWindowCall extends ethereum.Call {
  get inputs(): ChangeInterestTimeWindowCall__Inputs {
    return new ChangeInterestTimeWindowCall__Inputs(this);
  }

  get outputs(): ChangeInterestTimeWindowCall__Outputs {
    return new ChangeInterestTimeWindowCall__Outputs(this);
  }
}

export class ChangeInterestTimeWindowCall__Inputs {
  _call: ChangeInterestTimeWindowCall;

  constructor(call: ChangeInterestTimeWindowCall) {
    this._call = call;
  }

  get _newInterestTimeWindow(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeInterestTimeWindowCall__Outputs {
  _call: ChangeInterestTimeWindowCall;

  constructor(call: ChangeInterestTimeWindowCall) {
    this._call = call;
  }
}

export class ChangeTroveDebtCall extends ethereum.Call {
  get inputs(): ChangeTroveDebtCall__Inputs {
    return new ChangeTroveDebtCall__Inputs(this);
  }

  get outputs(): ChangeTroveDebtCall__Outputs {
    return new ChangeTroveDebtCall__Outputs(this);
  }
}

export class ChangeTroveDebtCall__Inputs {
  _call: ChangeTroveDebtCall;

  constructor(call: ChangeTroveDebtCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _debtChange(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _isDebtIncrease(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ChangeTroveDebtCall__Outputs {
  _call: ChangeTroveDebtCall;

  constructor(call: ChangeTroveDebtCall) {
    this._call = call;
  }

  get newDebt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecayBaseRateFromBorrowingAndCalculateFeeCall extends ethereum.Call {
  get inputs(): DecayBaseRateFromBorrowingAndCalculateFeeCall__Inputs {
    return new DecayBaseRateFromBorrowingAndCalculateFeeCall__Inputs(this);
  }

  get outputs(): DecayBaseRateFromBorrowingAndCalculateFeeCall__Outputs {
    return new DecayBaseRateFromBorrowingAndCalculateFeeCall__Outputs(this);
  }
}

export class DecayBaseRateFromBorrowingAndCalculateFeeCall__Inputs {
  _call: DecayBaseRateFromBorrowingAndCalculateFeeCall;

  constructor(call: DecayBaseRateFromBorrowingAndCalculateFeeCall) {
    this._call = call;
  }

  get _YUSDDebt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DecayBaseRateFromBorrowingAndCalculateFeeCall__Outputs {
  _call: DecayBaseRateFromBorrowingAndCalculateFeeCall;

  constructor(call: DecayBaseRateFromBorrowingAndCalculateFeeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InterestInitCollateralCall extends ethereum.Call {
  get inputs(): InterestInitCollateralCall__Inputs {
    return new InterestInitCollateralCall__Inputs(this);
  }

  get outputs(): InterestInitCollateralCall__Outputs {
    return new InterestInitCollateralCall__Outputs(this);
  }
}

export class InterestInitCollateralCall__Inputs {
  _call: InterestInitCollateralCall;

  constructor(call: InterestInitCollateralCall) {
    this._call = call;
  }

  get _newCollateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InterestInitCollateralCall__Outputs {
  _call: InterestInitCollateralCall;

  constructor(call: InterestInitCollateralCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class RedeemCollateralCall extends ethereum.Call {
  get inputs(): RedeemCollateralCall__Inputs {
    return new RedeemCollateralCall__Inputs(this);
  }

  get outputs(): RedeemCollateralCall__Outputs {
    return new RedeemCollateralCall__Outputs(this);
  }
}

export class RedeemCollateralCall__Inputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }

  get _YUSDamount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _YUSDMaxFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _firstRedemptionHint(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _upperPartialRedemptionHint(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _lowerPartialRedemptionHint(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _partialRedemptionHintAICR(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxIterations(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RedeemCollateralCall__Outputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }
}

export class RedeemCollateralSingleCall extends ethereum.Call {
  get inputs(): RedeemCollateralSingleCall__Inputs {
    return new RedeemCollateralSingleCall__Inputs(this);
  }

  get outputs(): RedeemCollateralSingleCall__Outputs {
    return new RedeemCollateralSingleCall__Outputs(this);
  }
}

export class RedeemCollateralSingleCall__Inputs {
  _call: RedeemCollateralSingleCall;

  constructor(call: RedeemCollateralSingleCall) {
    this._call = call;
  }

  get _YUSDamount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _YUSDMaxFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _target(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _upperHint(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _lowerHint(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _hintAICR(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _collToRedeem(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class RedeemCollateralSingleCall__Outputs {
  _call: RedeemCollateralSingleCall;

  constructor(call: RedeemCollateralSingleCall) {
    this._call = call;
  }
}

export class RedistributeDebtAndCollCall extends ethereum.Call {
  get inputs(): RedistributeDebtAndCollCall__Inputs {
    return new RedistributeDebtAndCollCall__Inputs(this);
  }

  get outputs(): RedistributeDebtAndCollCall__Outputs {
    return new RedistributeDebtAndCollCall__Outputs(this);
  }
}

export class RedistributeDebtAndCollCall__Inputs {
  _call: RedistributeDebtAndCollCall;

  constructor(call: RedistributeDebtAndCollCall) {
    this._call = call;
  }

  get _activePool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _defaultPool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _debt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class RedistributeDebtAndCollCall__Outputs {
  _call: RedistributeDebtAndCollCall;

  constructor(call: RedistributeDebtAndCollCall) {
    this._call = call;
  }
}

export class RemoveStakeAndCloseTroveCall extends ethereum.Call {
  get inputs(): RemoveStakeAndCloseTroveCall__Inputs {
    return new RemoveStakeAndCloseTroveCall__Inputs(this);
  }

  get outputs(): RemoveStakeAndCloseTroveCall__Outputs {
    return new RemoveStakeAndCloseTroveCall__Outputs(this);
  }
}

export class RemoveStakeAndCloseTroveCall__Inputs {
  _call: RemoveStakeAndCloseTroveCall;

  constructor(call: RemoveStakeAndCloseTroveCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _status(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveStakeAndCloseTroveCall__Outputs {
  _call: RemoveStakeAndCloseTroveCall;

  constructor(call: RemoveStakeAndCloseTroveCall) {
    this._call = call;
  }
}

export class SetTroveStatusCall extends ethereum.Call {
  get inputs(): SetTroveStatusCall__Inputs {
    return new SetTroveStatusCall__Inputs(this);
  }

  get outputs(): SetTroveStatusCall__Outputs {
    return new SetTroveStatusCall__Outputs(this);
  }
}

export class SetTroveStatusCall__Inputs {
  _call: SetTroveStatusCall;

  constructor(call: SetTroveStatusCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _num(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTroveStatusCall__Outputs {
  _call: SetTroveStatusCall;

  constructor(call: SetTroveStatusCall) {
    this._call = call;
  }
}

export class TickInterestCall extends ethereum.Call {
  get inputs(): TickInterestCall__Inputs {
    return new TickInterestCall__Inputs(this);
  }

  get outputs(): TickInterestCall__Outputs {
    return new TickInterestCall__Outputs(this);
  }
}

export class TickInterestCall__Inputs {
  _call: TickInterestCall;

  constructor(call: TickInterestCall) {
    this._call = call;
  }
}

export class TickInterestCall__Outputs {
  _call: TickInterestCall;

  constructor(call: TickInterestCall) {
    this._call = call;
  }
}

export class UpdateBaseRateCall extends ethereum.Call {
  get inputs(): UpdateBaseRateCall__Inputs {
    return new UpdateBaseRateCall__Inputs(this);
  }

  get outputs(): UpdateBaseRateCall__Outputs {
    return new UpdateBaseRateCall__Outputs(this);
  }
}

export class UpdateBaseRateCall__Inputs {
  _call: UpdateBaseRateCall;

  constructor(call: UpdateBaseRateCall) {
    this._call = call;
  }

  get newBaseRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateBaseRateCall__Outputs {
  _call: UpdateBaseRateCall;

  constructor(call: UpdateBaseRateCall) {
    this._call = call;
  }
}

export class UpdateSystemSnapshots_excludeCollRemainderCall extends ethereum.Call {
  get inputs(): UpdateSystemSnapshots_excludeCollRemainderCall__Inputs {
    return new UpdateSystemSnapshots_excludeCollRemainderCall__Inputs(this);
  }

  get outputs(): UpdateSystemSnapshots_excludeCollRemainderCall__Outputs {
    return new UpdateSystemSnapshots_excludeCollRemainderCall__Outputs(this);
  }
}

export class UpdateSystemSnapshots_excludeCollRemainderCall__Inputs {
  _call: UpdateSystemSnapshots_excludeCollRemainderCall;

  constructor(call: UpdateSystemSnapshots_excludeCollRemainderCall) {
    this._call = call;
  }

  get _activePool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdateSystemSnapshots_excludeCollRemainderCall__Outputs {
  _call: UpdateSystemSnapshots_excludeCollRemainderCall;

  constructor(call: UpdateSystemSnapshots_excludeCollRemainderCall) {
    this._call = call;
  }
}

export class UpdateTroveCollAndStakeAndTotalStakesCall extends ethereum.Call {
  get inputs(): UpdateTroveCollAndStakeAndTotalStakesCall__Inputs {
    return new UpdateTroveCollAndStakeAndTotalStakesCall__Inputs(this);
  }

  get outputs(): UpdateTroveCollAndStakeAndTotalStakesCall__Outputs {
    return new UpdateTroveCollAndStakeAndTotalStakesCall__Outputs(this);
  }
}

export class UpdateTroveCollAndStakeAndTotalStakesCall__Inputs {
  _call: UpdateTroveCollAndStakeAndTotalStakesCall;

  constructor(call: UpdateTroveCollAndStakeAndTotalStakesCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdateTroveCollAndStakeAndTotalStakesCall__Outputs {
  _call: UpdateTroveCollAndStakeAndTotalStakesCall;

  constructor(call: UpdateTroveCollAndStakeAndTotalStakesCall) {
    this._call = call;
  }
}

export class UpdateTroveDebtCall extends ethereum.Call {
  get inputs(): UpdateTroveDebtCall__Inputs {
    return new UpdateTroveDebtCall__Inputs(this);
  }

  get outputs(): UpdateTroveDebtCall__Outputs {
    return new UpdateTroveDebtCall__Outputs(this);
  }
}

export class UpdateTroveDebtCall__Inputs {
  _call: UpdateTroveDebtCall;

  constructor(call: UpdateTroveDebtCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get debt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateTroveDebtCall__Outputs {
  _call: UpdateTroveDebtCall;

  constructor(call: UpdateTroveDebtCall) {
    this._call = call;
  }
}

export class UpdateTroveRewardSnapshotsCall extends ethereum.Call {
  get inputs(): UpdateTroveRewardSnapshotsCall__Inputs {
    return new UpdateTroveRewardSnapshotsCall__Inputs(this);
  }

  get outputs(): UpdateTroveRewardSnapshotsCall__Outputs {
    return new UpdateTroveRewardSnapshotsCall__Outputs(this);
  }
}

export class UpdateTroveRewardSnapshotsCall__Inputs {
  _call: UpdateTroveRewardSnapshotsCall;

  constructor(call: UpdateTroveRewardSnapshotsCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTroveRewardSnapshotsCall__Outputs {
  _call: UpdateTroveRewardSnapshotsCall;

  constructor(call: UpdateTroveRewardSnapshotsCall) {
    this._call = call;
  }
}

export class UpdateTrovesCall extends ethereum.Call {
  get inputs(): UpdateTrovesCall__Inputs {
    return new UpdateTrovesCall__Inputs(this);
  }

  get outputs(): UpdateTrovesCall__Outputs {
    return new UpdateTrovesCall__Outputs(this);
  }
}

export class UpdateTrovesCall__Inputs {
  _call: UpdateTrovesCall;

  constructor(call: UpdateTrovesCall) {
    this._call = call;
  }

  get _borrowers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _lowerHints(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _upperHints(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class UpdateTrovesCall__Outputs {
  _call: UpdateTrovesCall;

  constructor(call: UpdateTrovesCall) {
    this._call = call;
  }
}

export class UpdateUnderCollateralizedTrovesCall extends ethereum.Call {
  get inputs(): UpdateUnderCollateralizedTrovesCall__Inputs {
    return new UpdateUnderCollateralizedTrovesCall__Inputs(this);
  }

  get outputs(): UpdateUnderCollateralizedTrovesCall__Outputs {
    return new UpdateUnderCollateralizedTrovesCall__Outputs(this);
  }
}

export class UpdateUnderCollateralizedTrovesCall__Inputs {
  _call: UpdateUnderCollateralizedTrovesCall;

  constructor(call: UpdateUnderCollateralizedTrovesCall) {
    this._call = call;
  }

  get _ids(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class UpdateUnderCollateralizedTrovesCall__Outputs {
  _call: UpdateUnderCollateralizedTrovesCall;

  constructor(call: UpdateUnderCollateralizedTrovesCall) {
    this._call = call;
  }
}
